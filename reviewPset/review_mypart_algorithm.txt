CSC130 Review problems – My Parts [9,11]


9. Reversing an Array
→ Write a program that prompts the user for an integer, then asks the user to enter that many values. Store these values in an
array and print the array. 
→ Then reverse the array elements so that the first element becomes the last element, the second element becomes the second to last element, and so on, with the old last element now first. 

→ Do not just reverse the order in which they are printed; actually change the way they are stored in the array. 

→ Do not create a second array; just rearrange the elements within the array you have. (Hint: Swap elements that need to change places.) 

→ When the elements have been reversed, print the array again.

Declare Class ReverseArray
{
	Declare Integer numOfValues
	Declare Integer array[] 
	
	Declare Public Void setArray()
	{
		Display (“Type a number of values to input”)
		Input numOfValues
		array[] = new Integer[numOfValues]
		
		For (Integer counter=0 to counter = numOfValues – 1, counter++)
		{
			Display (“Enter a value for # “ + (counter+1))
			Input array[counter]
		}
	} 
	Declare Public Void displayArray()
	{
		For(Integer counter=0 to counter = numOfValues -1, counter++)
		{
			Display (array[counter])
		}
	}
	Declare Public Void arraySwap()
	{
		Declare Integer temp 
		Declare Integer item = numOfValues 
		For (Integer front=0 to front = item -1, front++)
		{
			temp = array[front]
			array[front] = array[item-1]
			array[item-1] = temp 
			item = item-1
		}
	}
}

Declare Public ReverseArrayDemo
{
	Create an object named demoVer1 of ReverseArray class
	Call demoVer1.setArray()
	Display (“The original array : “, demoVer1.displayArray())
	Call demoVer1.arraySwap()
	Display (“The reversed array: “, demoVer1.displayArray())
}







Chapter 8: Arrays 130
11. A Shopping Cart
In this exercise you will complete a class that implements a shopping cart as an array of items. The file Item.java contains the
definition of a class named Item that models an item one would purchase. An item has a name, price, and quantity (the
quantity purchased). The file ShoppingCart.java implements the shopping cart as an array of Item objects.

1. Complete the ShoppingCart class by doing the following:

a. Declare an instance variable cart to be an array of Items and instantiate cart in the constructor to be an array holding
capacity Items.
b. Fill in the code for the increaseSize method. Your code should be similar to that in Listing 7.8 of the text but instead
of doubling the size just increase it by 3 elements.
c. Fill in the code for the addToCart method. This method should add the item to the cart and update the totalPrice
instance variable (note this variable takes into account the quantity).
d. Compile your class.

2. Write a program that simulates shopping. The program should have a loop that continues as long as the user wants to
shop. Each time through the loop read in the name, price, and quantity of the item the user wants to add to the cart. After
adding an item to the cart, the cart contents should be printed. After the loop print a “Please pay ...” message with the
total price of the items in the cart.

// ***************************************************************
// Item.java
//
// Represents an item in a shopping cart.
// ***************************************************************
import java.text.NumberFormat;

public class Item
{
	private String name;
	private double price;
	private int quantity;
	// ----------------------------------------------------- --
	// Create a new item with the given attributes.
	// ----------------------------------------------------- --
	public Item (String itemName, double itemPrice, int numPurchased)
	{
		name = itemName;
		price = itemPrice;
		quantity = numPurchased;
	}
	// ----------------------------------------------------- --
	// Return a string with the information about the item
	// ----------------------------------------------------- --
	public String toString ()
	{
		NumberFormat fmt = NumberFormat.getCurrencyInstance();
		return (name + "\t" + fmt.format(price) + "\t" + quantity + "\t"
		+ fmt.format(price*quantity));
	}
	// -----------------------------------------------
	// Returns the unit price of the item
	// -----------------------------------------------

	public double getPrice()
	{
		return price;
	}
	// -----------------------------------------------
	// Returns the name of the item
	// -----------------------------------------------
	public String getName()
	{	
		return name;
	}
	// -----------------------------------------------
	// Returns the quantity of the item
	// -----------------------------------------------
	public int getQuantity()
	{
		return quantity
	}
}



	// ***************************************************************
	// ShoppingCart.java
	//
	// Represents a shopping cart as an array of items
	// ***************************************************************
	import java.text.NumberFormat;

public class ShoppingCart
{
	private int itemCount; // total number of items in the cart
	private double totalPrice; // total price of items in the cart
	private int capacity; // current cart capacity
	Item[] cart; // declare an instance variable cart for an array of Item
 	
	
	// ---------------------------------------------------------
	// Creates an empty shopping cart with a capacity of 5 items.
	// ---------------------------------------------------------

	public ShoppingCart()
	{
		capacity = 5;
		itemCount = 0;
		totalPrice = 0.0;
		cart = new Item[capacity];
		
	}
	
	// -----------------------------------------------------
	// Adds an item to the shopping cart.
	// -----------------------------------------------------
	public void addToCart(String itemName, double price, int quantity)
	{
		if (itemCount > 5)
		{
			System.out.println(“Now the shopping cart is full.”);
		}
		else
		{
			cart[itemCount](itemName, price, quantity);
			totalPrice = totalPrice + (price * 	quantity);
		}
		itemCount = itemCount+1;
	}


	// -----------------------------------------------------
	// Returns the contents of the cart together with
	// summary information.
	// -----------------------------------------------------

	public String toString()
	{
	NumberFormat fmt = NumberFormat.getCurrencyInstance();
	String contents = "\nShopping Cart\n";
	contents += "\nItem\t\tUnit Price\tQuantity\tTotal\n";
	for (int i = 0; i < itemCount; i++)
	contents += cart[i].toString() + "\n";
	contents += "\nTotal Price: " + fmt.format(totalPrice);
	contents += "\n";
	return contents;
	}
	// -----------------------------------------------------
	// Increases the capacity of the shopping cart by 3
	// -----------------------------------------------------
	private void increaseSize()
	{
		capacity = capacity + 3;
	}
} 
